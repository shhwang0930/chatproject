1.  room에 현재 인원수 v
2. 회원가입 페이지 삽입 v
3. 맨처음 개설하면 채팅이 바로 안보임 어째서?
4. 3시 - 중간점검 > 1시까지 대략 끝을 보고

spring security에서는 별도의 인증 과정을 수행하지 않는 요청을 제공하기 위해 로그인을 하지 않아도
Authentication객체에 anonymousUser라는 principal을 넣어준다. 따라서 이를 유의하며 사용해야할듯


-- 퇴장을 백쪽에서 처리해야함


websokect
-- http > 단방향 통신 > 클라이언트가 요청할때마다 서버에서 응답하는 방식
-- webSocket > 양방향 통신 > 첫번째 요청을 하고 그 후로 계속 요청을 주고 받을 수 있음

Sockjs > 스프링 웹소켓 라이브러리

stomp > pubsub구조
topic(채팅창)에 대한 것을 구독한 유저(subscriber)들에게 pusblish(메세지) 발송 해주는 형식

redis pubsub > pub메세지들을 저장하지 않음 > sub이 없으면 메세지가 날아감 > in memory 방식이라 속도는 빠름
> rdbm mysql로 데이터 영속화


- 메세지 전송 과정
클라이언트 메세지 발송 요청 클 > 서버
메세지 websocket 채널 도달 전 presend를 통해 메세지 가공
서비스에서 메세지 발송 메서드 실행
redis의 메세지 발행 "/sub/chat/room/roomid 해당 채팅방을 구독한 클라이언트들에게 메세지 전송
웹소켓을 통해 메세지 받음

- 입장 or 퇴장
클라이언트가 WebSocket을 통해 서버에 연결되거나 연결이 끊어질 때, 서버는 이를 자동으로 처리합니다.
presend를 통해 처리 > subscribe or disconnect 확인




*WebSocket 메시징과 HTTP 요청에서의 인증 처리 방식 차이
@PostMapping (HTTP 요청)
@PostMapping은 HTTP 요청이 처리되는 방식으로, Spring Security가 인증과 권한 부여를 위한 필터 체인을 거쳐 인증이 완료된 후 요청이 처리됩니다. 따라서 SecurityContextHolder에서 Authentication 객체가 정상적으로 로딩되어 사용자가 인증된 상태에서 접근할 수 있습니다.

@MessageMapping (WebSocket)
WebSocket 연결은 HTTP 요청과는 다른 방식으로 처리됩니다. WebSocket 연결이 초기화될 때, Spring Security의 인증 컨텍스트가 제대로 설정되지 않을 수 있습니다. WebSocket 연결에서 인증을 처리하려면, SecurityContext가 WebSocket 핸들러에서 제대로 설정되도록 추가적인 설정이 필요할 수 있습니다.

웹소켓 응답에 대한 헤더에 존재하는 simpUser를 통해 메세지 작성자를 알아냄
